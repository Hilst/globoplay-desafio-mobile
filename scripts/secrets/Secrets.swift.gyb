%{
import os
from base64 import b64encode

def chunks(seq, size):
    return (seq[i:(i + size)] for i in range(0, len(seq), size))

def encode(string, cipher):
    return [ord(string[i]) ^ cipher[i % len(cipher)] for i in range(0, len(string))]

random_bytes = os.urandom(64)
token = b64encode(random_bytes).decode('utf-8')
salt = [ord(byte) for byte in token]
}%
/// Arquivo gerado automáticamente pela execução do gyb
/// Não deve estar no apontamento do git
/// Para alterá-lo modifique seu template em Secrets.swift.gyb
enum Secrets {
    private static let salt: [UInt8] = [
    % for chunk in chunks(salt, 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
    % end
    ]

    static var apiKey: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('TMDB_API_KEY'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }

    static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
        String(decoding: encoded.enumerated().map { (offset, element) in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }
}